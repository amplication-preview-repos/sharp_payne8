/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sender as PrismaSender } from "@prisma/client";

export class SenderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SenderCountArgs, "select">): Promise<number> {
    return this.prisma.sender.count(args);
  }

  async senders<T extends Prisma.SenderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SenderFindManyArgs>
  ): Promise<PrismaSender[]> {
    return this.prisma.sender.findMany<Prisma.SenderFindManyArgs>(args);
  }
  async sender<T extends Prisma.SenderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SenderFindUniqueArgs>
  ): Promise<PrismaSender | null> {
    return this.prisma.sender.findUnique(args);
  }
  async createSender<T extends Prisma.SenderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SenderCreateArgs>
  ): Promise<PrismaSender> {
    return this.prisma.sender.create<T>(args);
  }
  async updateSender<T extends Prisma.SenderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SenderUpdateArgs>
  ): Promise<PrismaSender> {
    return this.prisma.sender.update<T>(args);
  }
  async deleteSender<T extends Prisma.SenderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SenderDeleteArgs>
  ): Promise<PrismaSender> {
    return this.prisma.sender.delete(args);
  }
}
